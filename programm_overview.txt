tx.py:
    class TxFetcher:
        def get_url(cls, testnet=False):
        def fetch(cls, tx_id, testnet=False, fresh=False):
        def load_cache(cls, filename):
        def dump_cache(cls, filename):
    
    class Tx:
        def __init__(self, version, tx_ins, tx_outs, locktime, testnet=False):
        def id(self):
        def hash(self):
        def parse(cls, s, testnet=False):
        def serialize(self):
        def fee(self):
        def sig_hash(self, input_index):
        def verify_input(self, input_index):
        def verify(self):
        def sign_input(self, input_index, private_key):
        def is_coinbase(self):
        def coinbase_height(self):

    class TxIn:
        def __init__(self, prev_tx, prev_index, script_sig=None, sequence=0xffffffff):
        def parse(cls, s):
        def serialize(self):
        def fetch_tx(self, testnet=False):
        def value(self, testnet=False):
        def script_pubkey(self, testnet=False):
    
    class TxOut:
        def __init__(self, amount, script_pubkey):
        def parse(cls, s):
        def serialize(self):

ecc.py:
    class FieldElement:
        def __init__(self, num, prime):
        def __eq__(self, other):
        def __ne__(self, other):
        def __add__(self, other):
        def __sub__(self, other):
        def __mul__(self, other):
        def __pow__(self, exponent):
        def __truediv__(self, other):
        def __rmul__(self, coefficient):
    
    class Point:
        def __init__(self, x, y, a, b):
        def __eq__(self, other):
        def __neq__(self, other):
        def __add__(self, other):
        def __rmul__(self, coefficient):
    
    class S256Field(FieldElement):
        def __init__(self, num, prime=None):
        def __repr__(self):
        def sqrt(self):
    
    class S256Point(Point):
        def __init__(self, x, y, a=None, b=None):
        def __rmul__(self, coefficient):
        def verify(self, z, sig):
        def sec(self, compressed=True):
        def hash160(self, compressed=True):
        def address(self, compressed=True, testnet=False):
        def parse(self, sec_bin):

    class Signature:
        def __init__(self, r, s):
        def der(self):
        def parse(cls, signature_bin):
    
    class PrivateKey:
        def __init__(self, secret):
        def hex(self):
        def sign(self, z):
        def deterministic_k(self, z):
        def wif(self, compressed=True, testnet=False):
    
script.py:
    def p2pkh_script(h160):

    class Script():
        def __init__(self, cmds=None):
        def parse(cls, s):
        def raw_serialize(self):
        def serialize(self):
        def evaluate(self, z):
        def is_p2pkh_script_pubkey(self):
        def is_p2sh_script_pubkey(self):

    
helper.py
    def hash160(s):
    def hash256(s):
    def encode_base58(s):
    def encode_base58_checksum(s):
    def decode_base58(s):
    def little_endian_to_int(b):
    def int_to_little_endian(n, length):
    def read_varint(s):
    def encode_varint(i):
    def h160_to_p2pkh_address(h160, testnet=False):
    def h160_to_p2sh_address(h160, testnet=False):
    def bits_to_target(bits):
    def target_to_bits(target):
    def calculate_new_bits(previous_bits, time_differential):
    def merkle_parent(hash1, hash2):
    def merkle_parent_level(hashes):
    def merkle_root(hashes):
    def bit_field_to_bytes(bit_field):
    def bytes_to_bit_field(some_bytes):
    def murmur3(data, seed=0):


block.py
    class Block:
        def __init__(self, version, prev_block, merkle_root, timestamp, bits, nonce, tx_hashes=None): 
        def parse(cls, s):
        def serialize(self):
        def hash(self):
        def bip9(self):
        def bip91(self):
        def bip141(self):
        def target(self):
        def difficulty(self):
        def check_pow(self):
        def validate_merkle_root(self):

network.py
    class NetworkEnvelope:
        def __init__(self, command, payload, testnet=False):
        def __repr__(self):
        def parse(cls, s, testnet=False):
        def serialize(self):
        def stream(self):
    
    class VersionMessage:
        def __init__(self, version=70015, services=0, timestamp=None,
                 receiver_services=0,
                 receiver_ip=b'\x00\x00\x00\x00', receiver_port=8333,
                 sender_services=0,
                 sender_ip=b'\x00\x00\x00\x00', sender_port=8333,
                 nonce=None, user_agent=b'/programmingbitcoin:0.1/',
                 latest_block=0, relay=False):
        def serialize(self):

    class VerAckMessage:
        def __init__(self):
        def parse(cls, s):
        def serialize(self):
    
    class PingMessage:
        def __init__(self, nonce):
        def parse(cls, s):
        def serialize(self):
        
    class PongMessage:
        def __init__(self, nonce):
        def parse(cls, s):
        def serialize(self):
        
    class GetHeadersMessage:
        def __init__(self, version=70015, num_hashes=1, 
        start_block=None, end_block=None):
        def serialize(self):
    
    class HeadersMessage:
        def __init__(self, blocks):
        def parse(cls, stream):
    
    class SimpleNode:
        def __init__(self, host, port=None, testnet=False, logging=False):
        def handshake(self):
        def send(self, message):
        def read(self):
        def wait_for(self, *message_classes):
    
    class GetDataMessage:
        def __init__(self):
        def add_data(self, data_type, identifier):
        def serialize(self):
        

merkleblock.py
    class MerkleTree:
        def __init__(self, total):
        def __repr__(self):
        def up(self):
        def left(self):
        def right(self):
        def root(self):
        def set_current_node(self, value):
        def get_current_node(self):
        def get_left_node(self):
        def get_right_node(self):
        def is_leaf(self): 
        def right_exists(self):
        def populate_tree(self, flag_bits, hashes):
    
    class MerkleBlock:
        def __init__(self, version, prev_block, merkle_root, timestamp, bits, nonce, total, hashes, flags):
        def __repr__(self):
        def parse(cls, s):
        def is_valid(self):


bloomfilter.py
    class BloomFilter:
        def __init__(self, size, function_count, tweak):
        def add(self, item):
        def filter_bytes(self):
        def filterload(self, flag=1):





